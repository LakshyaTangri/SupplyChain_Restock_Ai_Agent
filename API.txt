### Comprehensive Documentation for API Endpoints

This document provides a detailed overview of the API endpoints defined in supply_chain_api.py. Each endpoint is documented with clear descriptions, input parameters, and expected output.

#### 1. `/forecast/demand`

**Description**: Generate demand forecast for a specified date range, store, and product.

**Input Parameters**:
- `start_date` (datetime): The start date for the forecast.
- `end_date` (datetime): The end date for the forecast.
- `store_id` (int, optional): The store ID for which to generate the forecast.
- `product_id` (int, optional): The product ID for which to generate the forecast.

**Expected Output**:
- JSON response with the forecasted demand data, including the date and demand quantity.

**Implementation**:
```python
@app.post("/forecast/demand")
async def forecast_demand(request: ForecastRequest):
    """
    Generate demand forecast for a specified date range, store, and product.

    Parameters:
    - start_date: The start date for the forecast.
    - end_date: The end date for the forecast.
    - store_id: The store ID for which to generate the forecast.
    - product_id: The product ID for which to generate the forecast.

    Returns:
    - JSON response with the forecasted demand data.
    """
    try:
        forecast = forecaster.forecast_demand(
            request.start_date, request.end_date, request.store_id, request.product_id
        )
        return {"forecast": forecast.to_dict(orient='records')}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

#### 2. `/optimize/inventory`

**Description**: Optimize inventory levels based on current data.

**Input Parameters**:
- List of `InventoryData` objects, each containing:
  - `store_id` (int): The store ID.
  - `product_id` (int): The product ID.
  - `current_level` (int): The current inventory level.
  - `date` (datetime): The date of the inventory data.

**Expected Output**:
- JSON response with the optimization results.

**Implementation**:
```python
@app.post("/optimize/inventory")
async def optimize_inventory(data: List[InventoryData]):
    """
    Optimize inventory levels based on current data.

    Parameters:
    - List of InventoryData objects.

    Returns:
    - JSON response with the optimization results.
    """
    try:
        optimization_results = inventory_optimizer.optimize_inventory(data)
        return {"optimization_results": optimization_results.to_dict(orient='records')}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

#### 3. `/optimize/pricing`

**Description**: Generate price optimization recommendations.

**Input Parameters**:
- `current_data` (dict): Current pricing data.
- `cost_data` (dict): Cost data for the products.

**Expected Output**:
- JSON response with the optimized prices.

**Implementation**:
```python
@app.post("/optimize/pricing")
async def optimize_pricing(current_data: dict, cost_data: dict):
    """
    Generate price optimization recommendations.

    Parameters:
    - current_data: Current pricing data.
    - cost_data: Cost data for the products.

    Returns:
    - JSON response with the optimized prices.
    """
    try:
        optimized_prices = pricing_optimizer.optimize_price(
            current_data=pd.DataFrame(current_data),
            cost_data=pd.DataFrame(cost_data)
        )
        return {"optimized_prices": optimized_prices.to_dict(orient='records')}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

#### 4. `/suppliers/optimize`

**Description**: Generate supplier optimization recommendations.

**Input Parameters**:
- `demand_forecast` (dict): Demand forecast data.
- `supplier_ratings` (dict): Supplier ratings data.
- `inventory_levels` (dict): Current inventory levels.

**Expected Output**:
- JSON response with the supplier optimization recommendations.

**Implementation**:
```python
@app.post("/suppliers/optimize")
async def optimize_suppliers(demand_forecast: dict, supplier_ratings: dict, inventory_levels: dict):
    """
    Generate supplier optimization recommendations.

    Parameters:
    - demand_forecast: Demand forecast data.
    - supplier_ratings: Supplier ratings data.
    - inventory_levels: Current inventory levels.

    Returns:
    - JSON response with the supplier optimization recommendations.
    """
    try:
        recommendations = supplier_manager.optimize_supplier_selection(
            demand_forecast=pd.DataFrame(demand_forecast),
            supplier_ratings=pd.DataFrame(supplier_ratings),
            inventory_levels=pd.DataFrame(inventory_levels)
        )
        return {"recommendations": recommendations.to_dict(orient='records')}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

#### 5. `/reports/performance`

**Description**: Generate a comprehensive performance report.

**Input Parameters**:
- `start_date` (datetime): The start date for the report.
- `end_date` (datetime): The end date for the report.

**Expected Output**:
- JSON response with the HTML report.

**Implementation**:
```python
@app.get("/reports/performance")
async def generate_performance_report(start_date: datetime, end_date: datetime):
    """
    Generate a comprehensive performance report.

    Parameters:
    - start_date: The start date for the report.
    - end_date: The end date for the report.

    Returns:
    - JSON response with the HTML report.
    """
    try:
        # Gather data for the report
        sales_data = load_sales_data(start_date, end_date)
        inventory_data = load_inventory_data(start_date, end_date)
        pricing_data = load_pricing_data(start_date, end_date)
        
        # Generate HTML report
        report_html = reporter.generate_html_report(
            sales_data=sales_data,
            inventory_data=inventory_data,
            pricing_data=pricing_data
        )
        
        return {"report_html": report_html}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

#### 6. `/optimize/supply-chain`

**Description**: Optimize the entire supply chain.

**Input Parameters**: None

**Expected Output**:
- JSON response with a message indicating the supply chain has been optimized.

**Implementation**:
```python
@app.post("/optimize/supply-chain")
async def optimize_supply_chain():
    """
    Optimize the entire supply chain.

    Returns:
    - JSON response with a message indicating the supply chain has been optimized.
    """
    try:
        # Implement the supply chain optimization logic
        # This could involve calling multiple optimization functions
        message = "Supply chain optimized"
        return {"message": message}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

### Summary

This document provides a comprehensive overview of the API endpoints defined in supply_chain_api.py. Each endpoint is documented with clear descriptions, input parameters, and expected output. The implementations ensure that the endpoints interact correctly with the models and retrieve the desired results.