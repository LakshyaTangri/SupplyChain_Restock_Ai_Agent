# Supply Chain AI System - Code Structure

## 1. Data Layer

### `data/schemas/data_schemas.py`
```python
class SupplyChainSchema:
    # Column definitions
    COLUMNS = [
        'date', 'store_id', 'product_id', 'category', 'region',
        'inventory_level', 'units_sold', 'units_ordered',
        'demand_forecast', 'price', 'discount', 'weather_condition',
        'holiday_promotion', 'competitor_pricing', 'seasonality'
    ]
    
    # Data types and validation rules
    SCHEMA_RULES = {
        'date': 'datetime64[ns]',
        'store_id': 'string',
        'product_id': 'string',
        'category': 'category',
        'region': 'category',
        'inventory_level': 'int64',
        'units_sold': 'int64',
        'units_ordered': 'int64',
        'demand_forecast': 'float64',
        'price': 'float64',
        'discount': 'float64',
        'weather_condition': 'category',
        'holiday_promotion': 'int64',
        'competitor_pricing': 'float64',
        'seasonality': 'category'
    }
```

### `data/processors/data_processor.py`
```python
class DataPreprocessor:
    def __init__()
    def load_data()
    def clean_data()
    def validate_schema()
    def encode_categorical()
    def normalize_numerical()
    def create_time_features()
    def split_train_test()
    def create_sequences()

class FeatureEngineer:
    def __init__()
    def calculate_moving_averages()
    def create_lag_features()
    def create_price_features()
    def create_seasonal_features()
    def create_weather_features()
    def create_promotion_features()
```

## 2. Model Layer

### `models/demand/demand_forecaster.py`
```python
class DemandForecaster:
    def __init__()
    def build_model()
    def train()
    def predict()
    def evaluate()
    def save_model()
    def load_model()

class TimeSeriesProcessor:
    def __init__()
    def create_sequences()
    def prepare_features()
    def prepare_targets()
```

### `models/inventory/inventory_monitor.py`
```python
class InventoryMonitor:
    def __init__()
    def track_inventory()
    def predict_stockout()
    def calculate_safety_stock()
    def optimize_inventory_levels()
    def generate_alerts()

class InventoryPredictor:
    def __init__()
    def build_model()
    def train()
    def predict()
    def evaluate()
```

### `models/stock/replenishment_optimizer.py`
```python
class ReplenishmentOptimizer:
    def __init__()
    def calculate_reorder_point()
    def optimize_order_quantity()
    def generate_order_recommendations()
    def evaluate_recommendations()

class QLearningAgent:
    def __init__()
    def train()
    def predict()
    def update()
    def save_model()
    def load_model()
```

### `models/supplier/supplier_manager.py`
```python
class SupplierManager:
    def __init__()
    def rate_suppliers()
    def optimize_supplier_selection()
    def track_supplier_performance()
    def generate_supplier_recommendations()

class SupplierRatingModel:
    def __init__()
    def build_model()
    def train()
    def predict()
    def evaluate()
```

### `models/pricing/price_optimizer.py`
```python
class PriceOptimizer:
    def __init__()
    def analyze_price_elasticity()
    def optimize_prices()
    def predict_revenue_impact()
    def generate_price_recommendations()

class ReinforcementLearningAgent:
    def __init__()
    def build_model()
    def train()
    def predict()
    def update_policy()
```

### `models/ensemble/ensemble_model.py`
```python
class EnsembleModel:
    def __init__()
    def combine_predictions()
    def optimize_weights()
    def evaluate_ensemble()
    def update_model_weights()

class ModelWeightOptimizer:
    def __init__()
    def calculate_performance_metrics()
    def optimize_weights()
    def validate_weights()
```

## 3. API Layer

### `api/grpc/services.py`
```python
class DemandForecastService:
    def get_forecast()
    def train_model()
    def update_model()

class InventoryMonitorService:
    def get_inventory_levels()
    def update_inventory()
    def get_alerts()

class ReplenishmentService:
    def get_replenishment_orders()
    def optimize_reorder_points()
    def update_orders()

class SupplierService:
    def get_supplier_ratings()
    def update_supplier_data()
    def get_recommendations()

class PricingService:
    def get_optimal_prices()
    def train_pricing_model()
    def update_prices()

class EnsembleService:
    def get_ensemble_prediction()
    def update_ensemble_weights()
```

### `api/rest/endpoints.py`
```python
class DashboardAPI:
    def get_metrics()
    def upload_data()
    def get_predictions()
    def get_model_performance()
    def update_configurations()
```

## 4. Dashboard Layer

### `dashboard/components/data_upload.py`
```python
class DataUploadComponent:
    def __init__()
    def handle_file_upload()
    def validate_data()
    def process_upload()
    def show_upload_status()
```

### `dashboard/components/visualization.py`
```python
class MetricsVisualizer:
    def __init__()
    def plot_predictions()
    def plot_inventory_levels()
    def plot_price_optimization()
    def plot_supplier_ratings()
    def plot_model_performance()
```

### `dashboard/components/configuration.py`
```python
class ModelConfiguration:
    def __init__()
    def update_model_params()
    def update_training_config()
    def update_prediction_config()
    def save_configuration()
```

## 5. Utilities

### `utils/metrics.py`
```python
class PerformanceMetrics:
    def calculate_mae()
    def calculate_mse()
    def calculate_rmse()
    def calculate_mape()
    def calculate_accuracy()
```

### `utils/logger.py`
```python
class Logger:
    def __init__()
    def log_training()
    def log_prediction()
    def log_error()
    def log_performance()
```

### `utils/config.py`
```python
class Configuration:
    def __init__()
    def load_config()
    def save_config()
    def update_config()
    def validate_config()
```